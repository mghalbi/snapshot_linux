---
- name: Gather facts on  service
  service_facts:

- setup:
    gather_subset:
      - mounts

- name: Gather facts user
  getent:
    database: passwd

- set_fact:
    services_running: "{{ ansible_facts['services']  | dict2items | json_query('[?value.state==`running`]') | map(attribute='value') | list  }}"
    users_sh: "{{ getent_passwd | dict2items | selectattr('value', 'contains', '/bin/bash')| map(attribute='key') }}"
    mounts: "{{  ansible_mounts | json_query('[].{device: device, mount: mount}') }}"

#---------- GET TCP PORTS ----------#

- name: Get TCP Listening Ports
  shell: "(command -v netstat && netstat -tlnp4 || command -v ss && ss -tlnp4 )| grep -E '(^tcp|^LISTEN)' | awk '{print $4}' | cut -d: -f2 | sort | uniq"
  register: tcp_ports

- name: Append each mount point to array
  set_fact:
    ports: "{{ tcp_ports.stdout_lines | json_query('[].{protocol: `tcp`, port: @}') }}"

#---------- GET CRONTAB ----------#

- name: Get Crontab for each user
  shell: "crontab  -u  {{ item }} -l"
  register: crontab_output
  failed_when: ('no crontab for ' not in crontab_output.stderr and crontab_output.rc != 0)
  loop: "{{ (users_sh) }}"

- name: Filter list crontab
  set_fact:
    crontab_by_user: "{{ (item.stdout_lines | rejectattr('0', 'match', '^#'))  | json_query('[].{name: @ , '+ query +' }')}}"
  vars:
    query: "user: `{{ item.item }}`"
  with_items: "{{ crontab_output.results | json_query('[?rc==`0`]') | list }}"
  register: crontab_output

- name: Set facts crontab
  set_fact:
    crontab: "{{ crontab_output.results | map(attribute='ansible_facts.crontab_by_user') | list | flatten }}"

#---------- GET ENVS ----------#

- name: Get environment variables for each user
  shell: "sudo -u {{ item }} bash -i -c 'env' "
  register: env_output
  loop: "{{ (users_sh) }}"

- name: Mapping of environment variables to objects
  set_fact:
    envs_by_user: "{{ item.stdout_lines  | json_query('[].{name: @ , '+ query +' }')}}"
  vars:
    query: "user: `{{ item.item }}`"
  with_items: "{{ env_output.results }}"
  register: envs

- name: Set fact environment variables
  set_fact:
    envs: "{{ envs.results | map(attribute='ansible_facts.envs_by_user') | list | flatten }}"

#---------- GET ALIAS ----------#

- name: Get alias for each user
  shell: "sudo -u {{ item }} bash -i -c 'alias'"
  register: alias_output
  loop: "{{ (users_sh) }}"

- name: Mapping of alias to objects
  set_fact:
    alias_by_user: "{{ item.stdout_lines  | json_query('[].{name: @ , '+ query +' }')}}"
  vars:
    query: "user: `{{ item.item }}`"
  with_items: "{{ alias_output.results }}"
  register: alias_result

- name: Set fact alias
  set_fact:
    alias: "{{ alias_result.results | map(attribute='ansible_facts.alias_by_user') | list | flatten }}"

#---------- GET PROCESS ----------#
# - name: Run the 'ps' command
#   shell: ps -e -o comm | awk 'NR>2 {print last} {last=$0}'
#   register: process_output

# - name: Set facts process
#   set_fact:
#     process: "{{  process_output.stdout_lines | unique  | map('regex_replace', '^(.+)$','{command: \\1}') | map('from_yaml') | list }}"

- name: Set facts process
  set_fact:
    process: []
